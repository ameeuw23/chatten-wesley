// Setup basic express servervar express = require('express');var app = express();// Routing configurationapp.use(express.static(__dirname + '/html'));// Server configurationvar server = app.listen(8081, function () {  var host = server.address().address  var port = server.address().port  console.log("Chat application is running on : http://%s:%s", host, port)})var io = require('socket.io')(server);var numUsers = 0;var userList = [];io.on('connection', function (socket) {  var addedUser = false;  // when the client emits 'new message', this listens and executes  socket.on('new message', function (data) {    // we tell the client to execute 'new message'    socket.broadcast.emit('new message', {      username: socket.username,      message: data    });  });  // Get list of users  socket.on('users', function (fn) {    fn(userList);  });  socket.on('add user', function (username) {    if (addedUser) return;    // we store the username in the socket session for this client    socket.username = username;    ++numUsers;    userList.push(username);    addedUser = true;    socket.emit('login', {      numUsers: numUsers    });    // Send global message    socket.broadcast.emit('user joined', {      username: socket.username,      numUsers: numUsers    });  });  // Send message when a user is typing a message  socket.on('typing', function () {    socket.broadcast.emit('typing', {      username: socket.username    });  });  // when the client emits 'stop typing', we broadcast it to others  socket.on('stop typing', function () {    socket.broadcast.emit('stop typing', {      username: socket.username    });  });  // when the user disconnects.. perform this  socket.on('disconnect', function () {    if (addedUser) {             --numUsers;      userList.splice(userList.indexOf(socket.username), 1);      // echo globally that this client has left      socket.broadcast.emit('user left', {        username: socket.username,        numUsers: numUsers      });    }  });});